{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hackathon\\\\hackathon-dashboard\\\\src\\\\components\\\\card\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport CardBig from \"./cardBig\";\nimport CardSmall from \"./cardSmall\";\nimport { v4 as uuid } from \"uuid\";\nimport CardContainer from \"./CardContainer\";\nimport \"./style.css\";\nimport * as data from \"../../json/cardData.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  card\n} = data && data.default;\n\nconst Card = () => {\n  _s();\n\n  const [cards, setCards] = React.useState(card);\n\n  const handleHover = (item, monitor) => {\n    const {\n      x,\n      y\n    } = monitor.getClientOffset();\n    console.log(\"hover\", x, y);\n  };\n\n  const handleDrop = (item, monitor) => {\n    const filteredCard = cards.filter(c => c.id == item.id);\n    const remainingCard = cards.filter(c => c.id !== item.id);\n    setCards(remainingCard.concat(filteredCard));\n  };\n\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    handleDrop: handleDrop,\n    handleHover: handleHover,\n    children: cards.map(item => {\n      return item && item.containerSize === \"Big\" ? /*#__PURE__*/_jsxDEV(CardBig, {\n        id: item.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(CardSmall, {\n        id: item.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Card, \"HXP0GYbscksje2uQVTsbGExKOfc=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["D:/Hackathon/hackathon-dashboard/src/components/card/index.js"],"names":["React","Component","CardBig","CardSmall","v4","uuid","CardContainer","data","card","default","Card","cards","setCards","useState","handleHover","item","monitor","x","y","getClientOffset","console","log","handleDrop","filteredCard","filter","c","id","remainingCard","concat","map","containerSize"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,OAAO,aAAP;AAEA,OAAO,KAAKC,IAAZ,MAAsB,0BAAtB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAWD,IAAI,IAAIA,IAAI,CAACE,OAA9B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,KAAK,CAACa,QAAN,CAAeL,IAAf,CAA1B;;AAEA,QAAMM,WAAW,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACrC,UAAM;AAAEC,MAAAA,CAAF;AAAKC,MAAAA;AAAL,QAAWF,OAAO,CAACG,eAAR,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,CAArB,EAAwBC,CAAxB;AACD,GAHD;;AAKA,QAAMI,UAAU,GAAG,CAACP,IAAD,EAAOC,OAAP,KAAmB;AACpC,UAAMO,YAAY,GAAGZ,KAAK,CAACa,MAAN,CAAcC,CAAD,IAAOA,CAAC,CAACC,EAAF,IAAQX,IAAI,CAACW,EAAjC,CAArB;AACA,UAAMC,aAAa,GAAGhB,KAAK,CAACa,MAAN,CAAcC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASX,IAAI,CAACW,EAAlC,CAAtB;AACAd,IAAAA,QAAQ,CAACe,aAAa,CAACC,MAAd,CAAqBL,YAArB,CAAD,CAAR;AACD,GAJD;;AAMA,sBACE,QAAC,aAAD;AAAe,IAAA,UAAU,EAAED,UAA3B;AAAuC,IAAA,WAAW,EAAER,WAApD;AAAA,cACGH,KAAK,CAACkB,GAAN,CAAWd,IAAD,IAAU;AACnB,aAAOA,IAAI,IAAIA,IAAI,CAACe,aAAL,KAAuB,KAA/B,gBACL,QAAC,OAAD;AAAS,QAAA,EAAE,EAAEf,IAAI,CAACW;AAAlB;AAAA;AAAA;AAAA;AAAA,cADK,gBAGL,QAAC,SAAD;AAAW,QAAA,EAAE,EAAEX,IAAI,CAACW;AAApB;AAAA;AAAA;AAAA;AAAA,cAHF;AAKD,KANA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAzBD;;GAAMhB,I;;KAAAA,I;AA2BN,eAAeA,IAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport CardBig from \"./cardBig\";\r\nimport CardSmall from \"./cardSmall\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport CardContainer from \"./CardContainer\";\r\n\r\nimport \"./style.css\";\r\n\r\nimport * as data from \"../../json/cardData.json\";\r\n\r\nconst { card } = data && data.default;\r\n\r\nconst Card = () => {\r\n  const [cards, setCards] = React.useState(card);\r\n\r\n  const handleHover = (item, monitor) => {\r\n    const { x, y } = monitor.getClientOffset();\r\n    console.log(\"hover\", x, y);\r\n  };\r\n\r\n  const handleDrop = (item, monitor) => {\r\n    const filteredCard = cards.filter((c) => c.id == item.id);\r\n    const remainingCard = cards.filter((c) => c.id !== item.id);\r\n    setCards(remainingCard.concat(filteredCard));\r\n  };\r\n\r\n  return (\r\n    <CardContainer handleDrop={handleDrop} handleHover={handleHover}>\r\n      {cards.map((item) => {\r\n        return item && item.containerSize === \"Big\" ? (\r\n          <CardBig id={item.id} />\r\n        ) : (\r\n          <CardSmall id={item.id} />\r\n        );\r\n      })}\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n"]},"metadata":{},"sourceType":"module"}
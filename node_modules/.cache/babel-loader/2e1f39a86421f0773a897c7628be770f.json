{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hackathon\\\\hackathon-dashboard\\\\src\\\\components\\\\card\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport CardBig from \"./cardBig\";\nimport CardSmall from \"./cardSmall\";\nimport { v4 as uuid } from \"uuid\";\nimport CardContainer from \"./CardContainer\";\nimport \"./style.css\";\nimport * as data from \"../../json/cardData.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  card\n} = data && data.default;\n\nconst Card = () => {\n  _s();\n\n  const [cards, setCards] = React.useState(card);\n\n  const handleDrop = id => {\n    const filteredCard = cards.filter(c => c.id == id);\n    const remainingCard = cards.filter(c => c.id !== id);\n    setCards(remainingCard.concat(filteredCard));\n  };\n\n  return (\n    /*#__PURE__*/\n    //   <div class=\"card-container\">\n    //     <CardBig />\n    //     <CardBig />\n    //     <CardBig />\n    //     <CardSmall />\n    //     <CardSmall />\n    //   </div>\n    _jsxDEV(CardContainer, {\n      handleDrop: handleDrop,\n      children: cards.map(item => {\n        return item && item.containerSize === \"Big\" ? /*#__PURE__*/_jsxDEV(CardBig, {\n          id: item.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(CardSmall, {\n          id: item.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Card, \"HXP0GYbscksje2uQVTsbGExKOfc=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["D:/Hackathon/hackathon-dashboard/src/components/card/index.js"],"names":["React","Component","CardBig","CardSmall","v4","uuid","CardContainer","data","card","default","Card","cards","setCards","useState","handleDrop","id","filteredCard","filter","c","remainingCard","concat","map","item","containerSize"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,OAAO,aAAP;AAEA,OAAO,KAAKC,IAAZ,MAAsB,0BAAtB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAWD,IAAI,IAAIA,IAAI,CAACE,OAA9B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,KAAK,CAACa,QAAN,CAAeL,IAAf,CAA1B;;AAEA,QAAMM,UAAU,GAAIC,EAAD,IAAQ;AACzB,UAAMC,YAAY,GAAGL,KAAK,CAACM,MAAN,CAAcC,CAAD,IAAOA,CAAC,CAACH,EAAF,IAAQA,EAA5B,CAArB;AACA,UAAMI,aAAa,GAAGR,KAAK,CAACM,MAAN,CAAcC,CAAD,IAAOA,CAAC,CAACH,EAAF,KAASA,EAA7B,CAAtB;AACAH,IAAAA,QAAQ,CAACO,aAAa,CAACC,MAAd,CAAqBJ,YAArB,CAAD,CAAR;AACD,GAJD;;AAMA;AAAA;AACE;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,YAAC,aAAD;AAAe,MAAA,UAAU,EAAEF,UAA3B;AAAA,gBACGH,KAAK,CAACU,GAAN,CAAWC,IAAD,IAAU;AACnB,eAAOA,IAAI,IAAIA,IAAI,CAACC,aAAL,KAAuB,KAA/B,gBACL,QAAC,OAAD;AAAS,UAAA,EAAE,EAAED,IAAI,CAACP;AAAlB;AAAA;AAAA;AAAA;AAAA,gBADK,gBAGL,QAAC,SAAD;AAAW,UAAA,EAAE,EAAEO,IAAI,CAACP;AAApB;AAAA;AAAA;AAAA;AAAA,gBAHF;AAKD,OANA;AADH;AAAA;AAAA;AAAA;AAAA;AATF;AAmBD,CA5BD;;GAAML,I;;KAAAA,I;AA8BN,eAAeA,IAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport CardBig from \"./cardBig\";\r\nimport CardSmall from \"./cardSmall\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport CardContainer from \"./CardContainer\";\r\n\r\nimport \"./style.css\";\r\n\r\nimport * as data from \"../../json/cardData.json\";\r\n\r\nconst { card } = data && data.default;\r\n\r\nconst Card = () => {\r\n  const [cards, setCards] = React.useState(card);\r\n\r\n  const handleDrop = (id) => {\r\n    const filteredCard = cards.filter((c) => c.id == id);\r\n    const remainingCard = cards.filter((c) => c.id !== id);\r\n    setCards(remainingCard.concat(filteredCard));\r\n  };\r\n\r\n  return (\r\n    //   <div class=\"card-container\">\r\n    //     <CardBig />\r\n    //     <CardBig />\r\n\r\n    //     <CardBig />\r\n    //     <CardSmall />\r\n    //     <CardSmall />\r\n    //   </div>\r\n    <CardContainer handleDrop={handleDrop}>\r\n      {cards.map((item) => {\r\n        return item && item.containerSize === \"Big\" ? (\r\n          <CardBig id={item.id} />\r\n        ) : (\r\n          <CardSmall id={item.id} />\r\n        );\r\n      })}\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n"]},"metadata":{},"sourceType":"module"}
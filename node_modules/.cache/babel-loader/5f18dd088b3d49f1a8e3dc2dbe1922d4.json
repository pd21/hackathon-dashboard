{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hackathon\\\\hackathon-dashboard\\\\src\\\\components\\\\card\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport CardBig from \"./cardBig\";\nimport CardSmall from \"./cardSmall\";\nimport { v4 as uuid } from \"uuid\";\nimport CardContainer from \"./CardContainer\";\nimport \"./style.css\";\nimport * as data from \"../../json/cardData.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  card\n} = data && data.default;\n\nconst Card = () => {\n  _s();\n\n  // we can have it as usestate or context\n  const [dragOverId, setDragOverId] = React.useState(null);\n  const [cards, setCards] = React.useState(card); // finding the drop position\n\n  const getRow = element => {\n    if (element && element.tagName === \"DIV\" && element.id) {\n      return element.id;\n    }\n\n    return null;\n  }; // calculating th eelement position when dragging\n\n\n  const handleHover = (item, monitor) => {\n    const {\n      x,\n      y\n    } = monitor.getClientOffset();\n    const dragOverElement = document.elementFromPoint(x, y);\n    const dragOverId = getRow(dragOverElement);\n    setDragOverId(dragOverId - 1);\n  }; // after dropping the element add the element to its respective position\n\n\n  const handleDrop = (item, monitor) => {\n    const filteredCard = cards.filter(c => c.id == item.id);\n    const remainingCards = cards.filter(c => c.id !== item.id); // calculate position index\n\n    const index = cards.findIndex(c => c.id == dragOverId);\n    remainingCards.splice(index, 0, filteredCard[0]);\n    console.log(\"rem\", remainingCards);\n    setCards(remainingCards);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    handleDrop: handleDrop,\n    handleHover: handleHover,\n    children: cards.map(item => {\n      return item && item.containerSize === \"Big\" ? /*#__PURE__*/_jsxDEV(CardBig, {\n        id: item.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(CardSmall, {\n        id: item.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Card, \"7E/n4pHIuOUByhKdd8xPqmXBaNE=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["D:/Hackathon/hackathon-dashboard/src/components/card/index.js"],"names":["React","Component","CardBig","CardSmall","v4","uuid","CardContainer","data","card","default","Card","dragOverId","setDragOverId","useState","cards","setCards","getRow","element","tagName","id","handleHover","item","monitor","x","y","getClientOffset","dragOverElement","document","elementFromPoint","handleDrop","filteredCard","filter","c","remainingCards","index","findIndex","splice","console","log","map","containerSize"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,OAAO,aAAP;AAEA,OAAO,KAAKC,IAAZ,MAAsB,0BAAtB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAWD,IAAI,IAAIA,IAAI,CAACE,OAA9B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,KAAK,CAACa,QAAN,CAAe,IAAf,CAApC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,KAAK,CAACa,QAAN,CAAeL,IAAf,CAA1B,CAJiB,CAMjB;;AACA,QAAMQ,MAAM,GAAIC,OAAD,IAAa;AAC1B,QAAIA,OAAO,IAAIA,OAAO,CAACC,OAAR,KAAoB,KAA/B,IAAwCD,OAAO,CAACE,EAApD,EAAwD;AACtD,aAAOF,OAAO,CAACE,EAAf;AACD;;AACD,WAAO,IAAP;AACD,GALD,CAPiB,CAcjB;;;AACA,QAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACrC,UAAM;AAAEC,MAAAA,CAAF;AAAKC,MAAAA;AAAL,QAAWF,OAAO,CAACG,eAAR,EAAjB;AACA,UAAMC,eAAe,GAAGC,QAAQ,CAACC,gBAAT,CAA0BL,CAA1B,EAA6BC,CAA7B,CAAxB;AACA,UAAMb,UAAU,GAAGK,MAAM,CAACU,eAAD,CAAzB;AACAd,IAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACD,GALD,CAfiB,CAsBjB;;;AACA,QAAMkB,UAAU,GAAG,CAACR,IAAD,EAAOC,OAAP,KAAmB;AACpC,UAAMQ,YAAY,GAAGhB,KAAK,CAACiB,MAAN,CAAcC,CAAD,IAAOA,CAAC,CAACb,EAAF,IAAQE,IAAI,CAACF,EAAjC,CAArB;AACA,UAAMc,cAAc,GAAGnB,KAAK,CAACiB,MAAN,CAAcC,CAAD,IAAOA,CAAC,CAACb,EAAF,KAASE,IAAI,CAACF,EAAlC,CAAvB,CAFoC,CAGpC;;AACA,UAAMe,KAAK,GAAGpB,KAAK,CAACqB,SAAN,CAAiBH,CAAD,IAAOA,CAAC,CAACb,EAAF,IAAQR,UAA/B,CAAd;AACAsB,IAAAA,cAAc,CAACG,MAAf,CAAsBF,KAAtB,EAA6B,CAA7B,EAAgCJ,YAAY,CAAC,CAAD,CAA5C;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBL,cAAnB;AACAlB,IAAAA,QAAQ,CAACkB,cAAD,CAAR;AACD,GARD;;AAUA,sBACE,QAAC,aAAD;AAAe,IAAA,UAAU,EAAEJ,UAA3B;AAAuC,IAAA,WAAW,EAAET,WAApD;AAAA,cACGN,KAAK,CAACyB,GAAN,CAAWlB,IAAD,IAAU;AACnB,aAAOA,IAAI,IAAIA,IAAI,CAACmB,aAAL,KAAuB,KAA/B,gBACL,QAAC,OAAD;AAAS,QAAA,EAAE,EAAEnB,IAAI,CAACF;AAAlB;AAAA;AAAA;AAAA;AAAA,cADK,gBAGL,QAAC,SAAD;AAAW,QAAA,EAAE,EAAEE,IAAI,CAACF;AAApB;AAAA;AAAA;AAAA;AAAA,cAHF;AAKD,KANA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA5CD;;GAAMT,I;;KAAAA,I;AA8CN,eAAeA,IAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport CardBig from \"./cardBig\";\r\nimport CardSmall from \"./cardSmall\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport CardContainer from \"./CardContainer\";\r\n\r\nimport \"./style.css\";\r\n\r\nimport * as data from \"../../json/cardData.json\";\r\n\r\nconst { card } = data && data.default;\r\n\r\nconst Card = () => {\r\n  // we can have it as usestate or context\r\n\r\n  const [dragOverId, setDragOverId] = React.useState(null);\r\n  const [cards, setCards] = React.useState(card);\r\n\r\n  // finding the drop position\r\n  const getRow = (element) => {\r\n    if (element && element.tagName === \"DIV\" && element.id) {\r\n      return element.id;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // calculating th eelement position when dragging\r\n  const handleHover = (item, monitor) => {\r\n    const { x, y } = monitor.getClientOffset();\r\n    const dragOverElement = document.elementFromPoint(x, y);\r\n    const dragOverId = getRow(dragOverElement);\r\n    setDragOverId(dragOverId - 1);\r\n  };\r\n\r\n  // after dropping the element add the element to its respective position\r\n  const handleDrop = (item, monitor) => {\r\n    const filteredCard = cards.filter((c) => c.id == item.id);\r\n    const remainingCards = cards.filter((c) => c.id !== item.id);\r\n    // calculate position index\r\n    const index = cards.findIndex((c) => c.id == dragOverId);\r\n    remainingCards.splice(index, 0, filteredCard[0]);\r\n    console.log(\"rem\", remainingCards);\r\n    setCards(remainingCards);\r\n  };\r\n\r\n  return (\r\n    <CardContainer handleDrop={handleDrop} handleHover={handleHover}>\r\n      {cards.map((item) => {\r\n        return item && item.containerSize === \"Big\" ? (\r\n          <CardBig id={item.id} />\r\n        ) : (\r\n          <CardSmall id={item.id} />\r\n        );\r\n      })}\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n"]},"metadata":{},"sourceType":"module"}